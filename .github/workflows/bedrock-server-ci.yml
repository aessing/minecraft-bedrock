name: Bedrock Server CI

on:
  push:
    branches-ignore:
      - master
  pull_request:
    branches: 
      - master

jobs:
  ci_build_container:
    name: Build and test container
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      
    - name: Build the Docker image
      run: docker build ./container --tag aessing/minecraft-bedrock:latest
      
    - name: Test create-BedrockContainer.sh and run the container
      run: create-BedrockContainer.sh --server-name 'GitHubContainerCI' --server-port '19132' --server-portv6 '19133' --level-name 'ContainerCIWorld' --level-type 'DEFAULT' --level-seed 'GitHubContainerCISeed' --game-mode 'survival' --difficulty 'easy' --allow-cheats 'false' --max-players '10' --online-mode 'true' --whitelist 'false' --default-player-permission-level 'member' --player-idle-timeout '30'  --view-distance '32' --tick-distance '4' --max-threads '8' --texturepack-required 'false' --content-log-file 'false' --compression-threshold '1' --server-authoritative-movement 'true' --player-movement-score-threshold '20' --player-movement-distance-threshold '0.3' --player-movement-duration-threshold '500' --correct-player-movement 'false' --volume '/srv/minecraft'
      working-directory: ./scripts
      #run: docker run -d -i -t --rm --restart no --network=host -e PORTv4=19132 -e PORTv6=19133 -e WORLD='CiTestWorld' --name='CiTestContainer' minecraft-bedrock-server:ci-build
    
    - name: Wait a few seconds for the container to get runnung or fail
      run: sleep 30s
  
    - name: Check if Docker container is up and running
      run: if ! [ "$( docker container inspect -f '{{.State.Status}}' ContainerCIWorld )" == "running" ]; then exit 1; fi
